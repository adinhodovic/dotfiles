---
- name: Set up temporary repo dir
  set_fact:
    repo_tmp_dir: "{{ tmp_dir }}/{{ repo | regex_replace('/', '_') }}"

- name: Ensure repo tmp dir exists
  file:
    path: "{{ repo_tmp_dir }}"
    state: directory

- name: Get latest release tag
  command: gh release view --repo {{ repo }} --json tagName --jq .tagName
  register: release_tag
  changed_when: false

- name: Print release version
  debug:
    msg: "Installing {{ binary_name }} from {{ repo }} version {{ release_tag.stdout }}"

- name: Download latest release asset
  command: >
    gh release download
    --repo {{ repo }}
    --pattern "{{ asset_pattern }}"
    --dir {{ repo_tmp_dir }}
    --clobber
  register: gh_download
  changed_when: false

- name: Find downloaded files
  find:
    paths: "{{ repo_tmp_dir }}"
    recurse: no
  register: found_files

- name: Identify archive or binary
  set_fact:
    archive_file: >-
      {{ found_files.files
         | selectattr('path', 'search', '.tar.gz$|.tgz$|.zip$|.tar.xz$')
         | list | first | default(omit) }}
    binary_file: >-
      {{ found_files.files
         | selectattr('path', 'search', binary_name)
         | list | first | default(omit) }}

- name: Extract archive if present
  when: archive_file is defined
  unarchive:
    src: "{{ archive_file.path }}"
    dest: "{{ repo_tmp_dir }}"
    remote_src: true

- name: Find binary (inside archive or directly)
  find:
    paths: "{{ repo_tmp_dir }}"
    recurse: yes
    patterns: "{{ binary_name }}*"
    file_type: file
  register: found_bin

- name: Install binary
  copy:
    src: "{{ found_bin.files[0].path }}"
    dest: "{{ download_dir }}/{{ binary_name }}"
    mode: "0755"
  when: found_bin.matched > 0

- name: Confirm installation
  debug:
    msg: "âœ… Installed {{ binary_name }} {{ release_tag.stdout }} to {{ download_dir }}"
