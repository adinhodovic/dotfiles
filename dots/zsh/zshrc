### Set/unset ZSH options
#########################
setopt INC_APPEND_HISTORY SHARE_HISTORY
setopt APPEND_HISTORY
unsetopt BG_NICE
setopt CORRECT
setopt EXTENDED_HISTORY
setopt MENUCOMPLETE
setopt ALL_EXPORT

### Set/unset  shell options
############################
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash

#############################################
# Prompt
#############################################
eval "$(oh-my-posh --init --shell zsh --config ~/.default.omp.json)"

#############################################
# Completion
#############################################
fpath=(~/.zsh/completion $fpath)
fpath+=~/.zfunc

# Init compinit
autoload -Uz compinit && compinit -i
autoload -U +X bashcompinit && bashcompinit

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#############################################
# Z Modules Autoload zsh modules when they are referenced
#################################################
autoload -U history-search-end
zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload zsh/zpty

#############################################
# Zsh Time
#############################################

ZSH_COMMAND_TIME_MIN_SECONDS=60

#############################################
# Completion Styles
#############################################

zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# Enable reverse-menu-complete
zmodload zsh/complist
# Highlight selected option in tab completion menu
zstyle ':completion:*' menu select

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

zstyle ":completion:*:git-checkout:*" sort false
zstyle ':completion:*:descriptions' format '[%d]'

# Use https://github.com/trapd00r/LS_COLORS for LS_COLORS
. /usr/share/LS_COLORS/dircolors.sh
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

function noop () {}
zle -N noop

end-of-line-no-whitespace() {
  zle vi-end-of-line
  zle vi-backward-word-end
}
zle -N end-of-line-no-whitespace

zle -N vi-append-x-selection-before
zle -N vi-append-x-selection-after

zle -N tmux-copy-mode

################################################
# General
################################################
export EDITOR="nvim"

source ~/.dotfiles/dots/zsh/fzf.sh
source ~/.dotfiles/dots/zsh/plugins.sh
source ~/.dotfiles/dots/zsh/alias.sh
source ~/.dotfiles/dots/zsh/variables.sh

###############################
# SSH Agent
zstyle :omz:plugins:ssh-agent agent-forwarding on
###############################
# History
###############################
HISTFILE=$HOME/.zhistory
HISTSIZE=50000
SAVEHIST=50000
HOSTNAME="`hostname`"
### Bind keys
#############

# Set vi-mode
bindkey -v

# Move to the end of the line and exclude whitespace
tmux-copy-mode() {
if [ -n "$TMUX" ]; then
  tmux copy-mode
fi
}

# Paste from clipboard
vi-append-x-selection-before () {
RBUFFER="$(xclip -o)$RBUFFER"
}
vi-append-x-selection-after () {
CURSOR=$((CURSOR+1))
RBUFFER="$(xclip -o)$RBUFFER"
}
bindkey "^?" backward-delete-char
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[6~' down-line-or-history
bindkey ' ' magic-space    # also do history expansion on space

# Key bindings. Wanna find weird keycodes? use cat
# Fix backspace delete in vi-mode
# http://www.zsh.org/mla/users/2009/msg00812.html
bindkey "^?" backward-delete-char
# Movement bindings
bindkey -M vicmd q vi-backward-word
bindkey -M vicmd 0 noop
bindkey -M vicmd Q vi-beginning-of-line
bindkey -M vicmd $ noop
bindkey -M vicmd W end-of-line-no-whitespace

bindkey -M vicmd P vi-append-x-selection-before
bindkey -M vicmd p vi-append-x-selection-after

function tmux-search {
  tmux copy-mode && tmux send-keys '?' && tmux send-keys \
    BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace BSpace
}
zle -N tmux-search

bindkey -M vicmd '/' tmux-search
bindkey -M vicmd v tmux-copy-mode

# Reverse scrolling shift+tab
bindkey -M menuselect '^[[Z' reverse-menu-complete


function awsprofile {
  profile=$(grep --text -E '\[.+\]' ~/.aws/credentials | tr -d '[]' | fzf)
  if [ -n "$profile" ]; then
    echo $profile > ~/.aws_profile
    export AWS_PROFILE=$profile
  fi
}

function awsregion {
  regions=(
    "us-east-2        (Ohio)"
    "us-east-1        (N. Virginia)"
    "us-west-1        (N. California)"
    "us-west-2        (Oregon)"
    "ap-south-1       (Mumbai)"
    "ap-northeast-3   (Osaka-Local)"
    "ap-northeast-2   (Seoul)"
    "ap-southeast-1   (Singapore)"
    "ap-southeast-2   (Sydney)"
    "ap-northeast-1   (Tokyo)"
    "ca-central-1     (Canada)"
    "cn-north-1       (Beijing)"
    "cn-northwest-1   (Ningxia)"
    "eu-central-1     (Frankfurt)"
    "eu-west-1        (Ireland)"
    "eu-west-2        (London)"
    "eu-west-3        (Paris)"
    "eu-north-1       (Stockholm)"
    "sa-east-1        (SÃ£o Paulo)"
  )
  selected=$(printf '%s\n' "${regions[@]}" | fzf --sort | awk '{print $1}')
  if [ -n "$selected" ]; then
    echo $selected > ~/.aws_region
    export AWS_DEFAULT_REGION=$selected
  fi
}

[ -f ~/.aws/profile ] && export AWS_PROFILE=$(cat ~/.aws/profile)
[ -f ~/.aws/region ]  && export AWS_DEFAULT_REGION=$(cat ~/.aws/region)

# Add direnv
eval "$(direnv hook zsh)"

# added by travis gem
[ -f /home/adin/.travis/travis.sh ] && source /home/adin/.travis/travis.sh

#############################################
# Automation
#############################################
function git-standup-last-month() {
  python <<EOF
from datetime import date, timedelta
import subprocess
import os
today = date.today()
beginning_of_this_week = today - timedelta(days=today.weekday())
end_of_this_week = beginning_of_this_week + timedelta(days=30)
cmd = f"git standup -A {beginning_of_this_week} -B {end_of_this_week} -s"
home = os.path.expanduser("~")
dirs = [
  os.path.join(home, "work/marble/ops"),
  os.path.join(home, ".dotfiles"),
  os.path.join(home, "company"),
  os.path.join(home, "personal"),
]
for dir in dirs:
  subprocess.run(cmd, shell=True, cwd=dir)
EOF
}

function git-standup-last-week() {
  python <<EOF
from datetime import date, timedelta
import subprocess
import os
today = date.today()
beginning_of_last_week = today - timedelta(days=today.weekday() + 7)
end_of_last_week = beginning_of_last_week + timedelta(days=7)
cmd = f"git standup -A {beginning_of_last_week} -B {end_of_last_week} -s"
home = os.path.expanduser("~")
dirs = [
  os.path.join(home, "work/marble/ops"),
  os.path.join(home, ".dotfiles"),
  os.path.join(home, "company"),
  os.path.join(home, "personal"),
]
for dir in dirs:
  subprocess.run(cmd, shell=True, cwd=dir)
EOF
}

function git-standup-this-week() {
  python <<EOF
from datetime import date, timedelta
import subprocess
import os
today = date.today()
beginning_of_this_week = today - timedelta(days=today.weekday())
end_of_this_week = beginning_of_this_week + timedelta(days=7)
cmd = f"git standup -A {beginning_of_this_week} -B {end_of_this_week} -s"
home = os.path.expanduser("~")
dirs = [
  os.path.join(home, "work/marble/ops"),
  os.path.join(home, ".dotfiles"),
  os.path.join(home, "company"),
  os.path.join(home, "personal"),
]
for dir in dirs:
  subprocess.run(cmd, shell=True, cwd=dir)
EOF
}


#############################################
# Kubectl
#############################################
export KUBE_EDITOR="nvim"

#############################################
# Kubectl fzf
#############################################

export KUBECTL_FZF_OPTIONS=(-1 --header-lines=2 --layout reverse -e --no-sort --bind space:accept --bind tab:down)

#############################################
# Broot
#############################################
source /home/adin/.config/broot/launcher/bash/br
############################################
# zsh-users/zsh-autosuggestions
############################################

bindkey '^ ' autosuggest-accept

###########################################
# Fzf-tab
###########################################

enable-fzf-tab

# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'lsd -1 --color=always $realpath'
zstyle ':fzf-tab:complete:_zlua:*' query-string input

#############################################
# Tanka
#############################################
complete -o nospace -C /usr/bin/tk tk

export PYTHONBREAKPOINT=pudb.set_trace
export KUBECTL_EXTERNAL_DIFF=kubectl-neat-diff
source /usr/share/nvm/init-nvm.sh
